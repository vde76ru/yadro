// src/js/ProductsManager.js
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏

import { showToast, showLoadingIndicator, hideLoadingIndicator } from './utils.js';

// ===== API –°–µ—Ä–≤–∏—Å =====
class ProductAPIService {
    constructor() {
        this.baseUrl = '/api';
        this.activeRequests = new Map();
        this.cache = new Map();
        this.cacheTimeout = 60000; // 1 –º–∏–Ω—É—Ç–∞
    }

    async search(params) {
        const url = new URL(`${this.baseUrl}/search`, window.location.origin);
        
        // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        Object.entries(params).forEach(([key, value]) => {
            if (value !== null && value !== undefined && value !== '') {
                url.searchParams.append(key, value);
            }
        });

        const requestKey = url.toString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        const cached = this.getFromCache(requestKey);
        if (cached) {
            console.log('üì¶ Using cached results for:', requestKey);
            return cached;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if (this.activeRequests.has(requestKey)) {
            console.log('‚è≥ Waiting for existing request:', requestKey);
            return this.activeRequests.get(requestKey);
        }

        try {
            const requestPromise = fetch(url, {
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                signal: AbortSignal.timeout(30000) // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            }).then(async response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                return response.json();
            });

            this.activeRequests.set(requestKey, requestPromise);
            const result = await requestPromise;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (result.success || result.data) {
                this.saveToCache(requestKey, result);
            }
            
            this.activeRequests.delete(requestKey);
            return result;

        } catch (error) {
            this.activeRequests.delete(requestKey);
            console.error('Search API error:', error);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            return {
                success: false,
                error: error.message,
                data: { 
                    products: [], 
                    total: 0,
                    page: params.page || 1,
                    limit: params.limit || 20
                }
            };
        }
    }

    getFromCache(key) {
        const cached = this.cache.get(key);
        if (cached && (Date.now() - cached.timestamp < this.cacheTimeout)) {
            return cached.data;
        }
        this.cache.delete(key);
        return null;
    }

    saveToCache(key, data) {
        this.cache.set(key, {
            data: data,
            timestamp: Date.now()
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
        if (this.cache.size > 50) {
            const firstKey = this.cache.keys().next().value;
            this.cache.delete(firstKey);
        }
    }

    clearCache() {
        this.cache.clear();
    }
}

// ===== –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä =====
export class ProductsManager {
    constructor() {
        if (window.__productsManagerInstance) {
            console.warn('ProductsManager already exists, returning existing instance');
            return window.__productsManagerInstance;
        }

        this.api = new ProductAPIService();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.products = [];
        this.currentPage = 1;
        this.itemsPerPage = 20;
        this.totalProducts = 0;
        this.sortColumn = 'name';
        this.sortDirection = 'asc';
        this.appliedFilters = {};
        this.isLoading = false;
        this.searchDebounceTimer = null;
        this.initialized = false;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ sessionStorage
        this.restoreState();
        
        this.init();
        
        window.__productsManagerInstance = this;
    }

    init() {
        if (this.initialized) {
            console.warn('‚ö†Ô∏è ProductsManager already initialized');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.checkUrlParams();
        
        this.bindEvents();
        this.syncGlobalVariables();
        this.initialized = true;
        
        console.log('‚úÖ ProductsManager initialized');
    }

    checkUrlParams() {
        const urlParams = new URLSearchParams(window.location.search);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä search –∏–∑ URL (–æ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞)
        const searchParam = urlParams.get('search');
        if (searchParam) {
            this.appliedFilters.search = searchParam;
            sessionStorage.setItem('search', searchParam);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.value = searchParam;
            }
            
            // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
            const newUrl = new URL(window.location);
            newUrl.searchParams.delete('search');
            window.history.replaceState({}, '', newUrl);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const page = urlParams.get('page');
        if (page) {
            this.currentPage = parseInt(page) || 1;
        }
        
        const limit = urlParams.get('limit');
        if (limit) {
            this.itemsPerPage = parseInt(limit) || 20;
        }
    }

    restoreState() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.currentPage = parseInt(sessionStorage.getItem('currentPage') || '1');
        this.itemsPerPage = parseInt(sessionStorage.getItem('itemsPerPage') || '20');
        this.sortColumn = sessionStorage.getItem('sortColumn') || 'name';
        this.sortDirection = sessionStorage.getItem('sortDirection') || 'asc';
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        Object.keys(sessionStorage).forEach(key => {
            if (!['itemsPerPage', 'sortColumn', 'sortDirection', 'currentPage'].includes(key)) {
                this.appliedFilters[key] = sessionStorage.getItem(key);
            }
        });
    }

    bindEvents() {
        // –ü–æ–∏—Å–∫ —Å –¥–µ–±–∞—É–Ω—Å–æ–º
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                clearTimeout(this.searchDebounceTimer);
                const value = e.target.value.trim();
                
                this.searchDebounceTimer = setTimeout(() => {
                    if (value !== (this.appliedFilters.search || '')) {
                        if (value) {
                            this.appliedFilters.search = value;
                            sessionStorage.setItem('search', value);
                        } else {
                            delete this.appliedFilters.search;
                            sessionStorage.removeItem('search');
                        }
                        
                        this.currentPage = 1;
                        this.fetchProducts();
                    }
                }, 300);
            });

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (this.appliedFilters.search) {
                searchInput.value = this.appliedFilters.search;
            }
        }

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        ['itemsPerPageSelect', 'itemsPerPageSelectBottom'].forEach(id => {
            const el = document.getElementById(id);
            if (el) {
                el.value = this.itemsPerPage;
                el.addEventListener('change', (e) => {
                    this.itemsPerPage = parseInt(e.target.value);
                    sessionStorage.setItem('itemsPerPage', this.itemsPerPage);
                    this.currentPage = 1;
                    this.fetchProducts();
                });
            }
        });

        // –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
        const citySelect = document.getElementById('citySelect');
        if (citySelect) {
            citySelect.addEventListener('change', () => {
                // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–∏ —Å–º–µ–Ω–µ –≥–æ—Ä–æ–¥–∞
                this.api.clearCache();
                this.fetchProducts(true);
            });
        }
    }

    syncGlobalVariables() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        window.productsData = this.products;
        window.currentPage = this.currentPage;
        window.itemsPerPage = this.itemsPerPage;
        window.totalProducts = this.totalProducts;
        window.sortColumn = this.sortColumn;
        window.sortDirection = this.sortDirection;
        window.appliedFilters = this.appliedFilters;
    }

    async fetchProducts(force = false) {
        if (this.isLoading && !force) {
            console.log('‚è≥ Fetch already in progress');
            return;
        }
        
        this.isLoading = true;
        showLoadingIndicator();
        
        try {
            // –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
            const params = {
                q: this.appliedFilters.search || '',
                page: this.currentPage,
                limit: this.itemsPerPage,
                sort: this.convertSortToApiFormat(),
                city_id: document.getElementById('citySelect')?.value || '1'
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
            ['brand_name', 'series_name', 'category'].forEach(filter => {
                if (this.appliedFilters[filter]) {
                    params[filter] = this.appliedFilters[filter];
                }
            });
            
            console.log('üîç Fetching products with params:', params);
            
            const result = await this.api.search(params);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (result.success !== false) {
                const data = result.data || result;
                this.products = data.products || [];
                this.totalProducts = data.total || 0;
                
                console.log(`‚úÖ Loaded ${this.products.length} products, total: ${this.totalProducts}`);
                
                this.syncGlobalVariables();
                this.renderProducts();
                this.updatePaginationDisplay();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
                if (this.products.length > 0) {
                    this.loadDynamicData();
                }
            } else {
                console.error('‚ùå Search failed:', result.error);
                this.handleError(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå Fetch error:', error);
            this.handleError(error.message);
        } finally {
            this.isLoading = false;
            hideLoadingIndicator();
        }
    }

    async loadDynamicData() {
        const productIds = this.products.map(p => p.product_id).filter(id => id > 0);
        if (productIds.length === 0) return;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ª–∏—á–∏—è
        if (window.loadAvailability) {
            try {
                await window.loadAvailability(productIds);
            } catch (error) {
                console.error('Failed to load availability:', error);
            }
        }
    }

    renderProducts() {
        if (typeof window.renderProductsTable === 'function') {
            window.renderProductsTable();
        } else {
            console.error('renderProductsTable function not found');
        }
    }

    handleError(message) {
        this.products = [];
        this.totalProducts = 0;
        this.syncGlobalVariables();
        this.renderProducts();
        showToast('–û—à–∏–±–∫–∞: ' + message, true);
    }

    convertSortToApiFormat() {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç API
        const sortMap = {
            'name': 'name',
            'external_id': 'external_id',
            'price': this.sortDirection === 'asc' ? 'price_asc' : 'price_desc',
            'base_price': this.sortDirection === 'asc' ? 'price_asc' : 'price_desc',
            'availability': 'availability',
            'orders_count': 'popularity'
        };
        
        return sortMap[this.sortColumn] || 'relevance';
    }

    updatePaginationDisplay() {
        const totalPages = Math.ceil(this.totalProducts / this.itemsPerPage);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        document.querySelectorAll('#currentPage, #currentPageBottom').forEach(el => {
            if (el) el.textContent = this.currentPage;
        });
        
        document.querySelectorAll('#totalPages, #totalPagesBottom').forEach(el => {
            if (el) el.textContent = totalPages;
        });
        
        document.querySelectorAll('#totalProductsText, #totalProductsTextBottom').forEach(el => {
            if (el) el.textContent = `–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${this.totalProducts}`;
        });
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏
        document.querySelectorAll('.prev-btn').forEach(btn => {
            if (btn) btn.disabled = this.currentPage <= 1;
        });
        
        document.querySelectorAll('.next-btn').forEach(btn => {
            if (btn) btn.disabled = this.currentPage >= totalPages;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.querySelectorAll('#pageInput, #pageInputBottom').forEach(el => {
            if (el) el.value = this.currentPage;
        });
    }

    sortProducts(column) {
        if (this.sortColumn === column) {
            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            this.sortColumn = column;
            this.sortDirection = 'asc';
        }
        
        sessionStorage.setItem('sortColumn', this.sortColumn);
        sessionStorage.setItem('sortDirection', this.sortDirection);
        
        this.syncGlobalVariables();
        this.currentPage = 1;
        this.fetchProducts();
    }

    loadPage(page) {
        const totalPages = Math.ceil(this.totalProducts / this.itemsPerPage);
        page = Math.max(1, Math.min(page, totalPages));
        
        if (this.currentPage === page) return;
        
        this.currentPage = page;
        sessionStorage.setItem('currentPage', page);
        this.syncGlobalVariables();
        this.fetchProducts();
    }

    applyFilter(key, value) {
        if (value) {
            this.appliedFilters[key] = value;
            sessionStorage.setItem(key, value);
        } else {
            delete this.appliedFilters[key];
            sessionStorage.removeItem(key);
        }
        
        this.currentPage = 1;
        this.api.clearCache(); // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.fetchProducts();
    }

    clearAllFilters() {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
        Object.keys(this.appliedFilters).forEach(key => {
            sessionStorage.removeItem(key);
        });
        this.appliedFilters = {};
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.value = '';
        }
        
        this.currentPage = 1;
        this.api.clearCache();
        this.fetchProducts();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const productsManager = new ProductsManager();