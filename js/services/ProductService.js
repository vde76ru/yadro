/**
 * üöÄ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
 * –í–µ—Ä—Å–∏—è 3.1 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 */
export class ProductService {
    constructor() {
        this.baseUrl = '/api';
        this.cache = new Map();
        this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        this.requestTimeout = 10000; // 10 —Å–µ–∫—É–Ω–¥
        this.searchDebounceTime = 300; // –º—Å
        this.searchDebounceTimer = null;
        this.lastSearchQuery = '';
        this.searchHistory = this.loadSearchHistory();
        
        // üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        this.searchConfig = {
            minQueryLength: 2,
            maxQueryLength: 200,
            autocompleteDelay: 150
        };
    }
    
    /**
     * üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
     */
    normalizeSearchQuery(query) {
        if (!query || typeof query !== 'string') {
            return '';
        }
        
        let normalized = query
            // –£–±–∏—Ä–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            .replace(/[<>'"\\]/g, '')
            
            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            .replace(/[qwertyuiopasdfghjklzxcvbnm]/gi, (match) => {
                const ruMap = {
                    // –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥
                    'q': '–π', 'w': '—Ü', 'e': '—É', 'r': '–∫', 't': '–µ',
                    'y': '–Ω', 'u': '–≥', 'i': '—à', 'o': '—â', 'p': '–∑',
                    // –°—Ä–µ–¥–Ω–∏–π —Ä—è–¥
                    'a': '—Ñ', 's': '—ã', 'd': '–≤', 'f': '–∞', 'g': '–ø',
                    'h': '—Ä', 'j': '–æ', 'k': '–ª', 'l': '–¥',
                    // –ù–∏–∂–Ω–∏–π —Ä—è–¥
                    'z': '—è', 'x': '—á', 'c': '—Å', 'v': '–º', 'b': '–∏',
                    'n': '—Ç', 'm': '—å'
                };
                
                // –û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (RU -> EN)
                const enMap = {
                    '–π': 'q', '—Ü': 'w', '—É': 'e', '–∫': 'r', '–µ': 't',
                    '–Ω': 'y', '–≥': 'u', '—à': 'i', '—â': 'o', '–∑': 'p',
                    '—Ñ': 'a', '—ã': 's', '–≤': 'd', '–∞': 'f', '–ø': 'g',
                    '—Ä': 'h', '–æ': 'j', '–ª': 'k', '–¥': 'l',
                    '—è': 'z', '—á': 'x', '—Å': 'c', '–º': 'v', '–∏': 'b',
                    '—Ç': 'n', '—å': 'm'
                };
                
                const lowerMatch = match.toLowerCase();
                
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º EN -> RU
                if (ruMap[lowerMatch]) {
                    return match === lowerMatch ? ruMap[lowerMatch] : ruMap[lowerMatch].toUpperCase();
                }
                
                // –ü–æ—Ç–æ–º RU -> EN
                if (enMap[lowerMatch]) {
                    return match === lowerMatch ? enMap[lowerMatch] : enMap[lowerMatch].toUpperCase();
                }
                
                return match;
            })
            
            // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
            .replace(/\s+/g, ' ')
            
            // üî• –ì–õ–ê–í–ù–û–ï: —Å–∫–ª–µ–∏–≤–∞–µ–º —á–∏—Å–ª–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏
            .replace(/(\d+)\s*([–∞-—è–ê-–ØA-Za-z]{1,3})\b/g, '$1$2')
            
            // –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
            .replace(/([0-9]+)\s*[—Ö–•]\s*([0-9]+)/g, '$1x$2')
            
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–µ—Ñ–∏—Å—ã
            .replace(/[\-_]+/g, '-')
            
            // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            .trim();
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if (normalized.length > this.searchConfig.maxQueryLength) {
            normalized = normalized.substring(0, this.searchConfig.maxQueryLength);
        }
        
        console.log(`üîç Query normalized: "${query}" -> "${normalized}"`);
        return normalized;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ ID –≥–æ—Ä–æ–¥–∞ (–∏–∑ localStorage –∏–ª–∏ cookie)
     */
    getCurrentCityId() {
        try {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
            const cityId = localStorage.getItem('currentCityId');
            if (cityId) {
                return parseInt(cityId);
            }
            
            // Fallback - –ø—Ä–æ–±—É–µ–º –∏–∑ cookie
            const cookies = document.cookie.split(';');
            for (let cookie of cookies) {
                const [name, value] = cookie.trim().split('=');
                if (name === 'city_id') {
                    return parseInt(value);
                }
            }
            
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ú–æ—Å–∫–≤–∞
            return 1;
        } catch (e) {
            console.warn('Failed to get current city ID, using default');
            return 1;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ç–∞–π–º–∞—É—Ç–∞
     */
    async handleTimeoutError(url, params, requestId) {
        console.warn(`‚è∞ [${requestId}] Request timeout, trying cache or fallback`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        const cacheKey = this.getCacheKey('search', params);
        const cached = this.getFromCache(cacheKey);
        
        if (cached) {
            console.log(`üíæ [${requestId}] Using cache after timeout`);
            return {
                ...cached,
                warning: '–ü–æ–∫–∞–∑–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫–µ—à–∞ - –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è',
                fallback_used: 'cache_timeout'
            };
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–µ—à–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
        return this.getFallbackResponse(new Error('Request timeout'), params);
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
     */
    getFallbackResponse(error, params) {
        console.warn('üîÑ Using fallback response for error:', error.message);
        
        return {
            success: true, // –§–æ—Ä–º–∞–ª—å–Ω–æ —É—Å–ø–µ—à–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å UI
            data: {
                products: [],
                total: 0,
                page: params.page || 1,
                limit: params.limit || 20,
                warning: '–°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                error_details: error.message,
                fallback_used: 'emergency'
            },
            fallback: true
        };
    }
    
    /**
     * –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ HTTP
     */
    async handleHttpError(response, fullUrl, requestId) {
        const status = response.status;
        let errorDetails = `HTTP ${status}`;
        
        try {
            const errorBody = await response.text();
            if (errorBody) {
                errorDetails += `: ${errorBody.substring(0, 200)}`;
            }
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è body
        }
        
        console.error(`‚ùå [${requestId}] ${errorDetails}`);
        
        // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
        switch (status) {
            case 503:
                throw new Error('SERVICE_TEMPORARILY_UNAVAILABLE');
            case 502:
            case 504:
                throw new Error('GATEWAY_ERROR');
            case 429:
                throw new Error('RATE_LIMIT_EXCEEDED');
            case 400:
                throw new Error('BAD_REQUEST');
            case 404:
                throw new Error('ENDPOINT_NOT_FOUND');
            case 401:
            case 403:
                throw new Error('ACCESS_DENIED');
            case 500:
                throw new Error('INTERNAL_SERVER_ERROR');
            default:
                throw new Error(`HTTP_${status}`);
        }
    }
    
    /**
     * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
     */
    generateSmartSuggestions(query) {
        const suggestions = [];
        const analysis = this.analyzeSearchQuery(query);
        
        // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã —á–∏—Å–ª–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–æ–º–∏–Ω–∞–ª—ã
        if (analysis.numbers.length > 0) {
            const number = analysis.numbers[0];
            const popularUnits = ['–∞', '–≤', '–≤—Ç', '–º–º', '–º', '—Å–º'];
            
            popularUnits.forEach(unit => {
                const suggestion = number + unit;
                if (!query.includes(suggestion)) {
                    suggestions.push({
                        text: suggestion,
                        type: 'smart_unit',
                        score: 60,
                        description: `${number} ${this.getUnitDescription(unit)}`
                    });
                }
            });
        }
        
        // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –±—Ä–µ–Ω–¥, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–∏–∏
        if (analysis.brands.length > 0) {
            const brand = analysis.brands[0].toLowerCase();
            const popularSeries = {
                'iek': ['–≤–∞47-29', '–≤–∞47-100', '–≤–∞47-60–º', '—Å–∫–µ-11'],
                'karat': ['–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π', '–º–æ–¥—É–ª—å–Ω—ã–π'],
                'schneider': ['easy9', 'acti9', 'multi9'],
                'legrand': ['dx¬≥', 'rx¬≥', 'valena'],
                'abb': ['s200', 's800', 'tmax']
            };
            
            if (popularSeries[brand]) {
                popularSeries[brand].forEach(series => {
                    if (!query.toLowerCase().includes(series)) {
                        suggestions.push({
                            text: `${query} ${series}`,
                            type: 'smart_series',
                            score: 70,
                            description: `–°–µ—Ä–∏—è ${series} –æ—Ç ${brand.toUpperCase()}`
                        });
                    }
                });
            }
        }
        
        return suggestions.slice(0, 3);
    }
    
    /**
     * –û–ø–∏—Å–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
     */
    getUnitDescription(unit) {
        const descriptions = {
            '–∞': '–∞–º–ø–µ—Ä',
            '–≤': '–≤–æ–ª—å—Ç',
            '–≤—Ç': '–≤–∞—Ç—Ç',
            '–º–º': '–º–∏–ª–ª–∏–º–µ—Ç—Ä',
            '–º': '–º–µ—Ç—Ä',
            '—Å–º': '—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä'
        };
        return descriptions[unit] || unit;
    }
    
    /**
     * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
     */
    analyzeSearchQuery(query) {
        const normalized = this.normalizeSearchQuery(query);
        const parts = normalized.split(/\s+/).filter(p => p.length > 0);
        
        const analysis = {
            original: query,
            normalized: normalized,
            parts: parts,
            numbers: [],      // –ù–æ–º–∏–Ω–∞–ª—ã: 16–∞, 220–≤
            codes: [],        // –ê—Ä—Ç–∏–∫—É–ª—ã: mva40-1-016-c
            brands: [],       // –ë—Ä–µ–Ω–¥—ã: iek, karat
            words: [],        // –°–ª–æ–≤–∞: –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å, –º–æ–¥—É–ª—å–Ω—ã–π
            isCodeSearch: false,
            isNumberSearch: false
        };
        
        parts.forEach(part => {
            // –ß–∏—Å–ª–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏
            if (/^\d+[–∞-—èa-z]*$/i.test(part)) {
                analysis.numbers.push(part);
                analysis.isNumberSearch = true;
            }
            // –ö–æ–¥—ã/–∞—Ä—Ç–∏–∫—É–ª—ã
            else if (/^[a-z0-9\-\.\_]+$/i.test(part) && part.length > 2) {
                analysis.codes.push(part);
                analysis.isCodeSearch = true;
            }
            // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
            else if (['iek', 'karat', 'schneider', 'legrand', 'abb'].includes(part.toLowerCase())) {
                analysis.brands.push(part);
            }
            // –û–±—ã—á–Ω—ã–µ —Å–ª–æ–≤–∞
            else {
                analysis.words.push(part);
            }
        });
        
        console.log('üß† Query analysis:', analysis);
        return analysis;
    }
    
    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
     */
    async search(params = {}) {
        const endpoint = `${this.baseUrl}/search`;
        const allowedSorts = ['relevance', 'name', 'price_asc', 'price_desc', 'availability', 'popularity'];
        
        if (params.sort && !allowedSorts.includes(params.sort)) {
            params.sort = 'relevance';
        }
        
        // –£–º–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if (params.q) {
            const originalQuery = params.q;
            params.q = this.normalizeSearchQuery(params.q);
            
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–µ –∏—â–µ–º
            if (params.q.length < this.searchConfig.minQueryLength) {
                return {
                    success: true,
                    data: {
                        products: [],
                        total: 0,
                        page: params.page || 1,
                        limit: params.limit || 20,
                        message: '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º ' + this.searchConfig.minQueryLength + ' —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞'
                    }
                };
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            this.saveToSearchHistory(originalQuery);
            
            console.log(`üîç Searching for: "${params.q}" (normalized from "${originalQuery}")`);
        }
        
        const cacheKey = this.getCacheKey('search', params);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
        const cached = this.getFromCache(cacheKey);
        if (cached) {
            console.log('üíæ Using cached results');
            return cached;
        }
        
        try {
            const response = await this.request(endpoint, params);
            
            if (response.success) {
                const result = {
                    success: true,
                    data: {
                        products: response.data?.products || [],
                        total: response.data?.total || 0,
                        page: params.page || 1,
                        limit: params.limit || 20,
                        aggregations: response.data?.aggregations || {},
                        max_score: response.data?.max_score || 0,
                        suggestions: this.generateQuerySuggestions(params.q, response.data),
                        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        queryAnalysis: params.q ? this.analyzeSearchQuery(params.q) : null
                    }
                };
                
                // –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                this.enhanceSearchResults(result.data, params.q);
                
                this.saveToCache(cacheKey, result);
                return result;
            }
            
            return this.errorResponse('Search failed');
            
        } catch (error) {
            console.error('‚ùå Search error:', error);
            return this.errorResponse(error.message);
        }
    }
    
    /**
     * –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
     */
    async autocomplete(query, limit = 10) {
        if (!query || query.length < 1) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –ø—É—Å—Ç–æ
            return { 
                success: true, 
                suggestions: this.getSearchHistorySuggestions(limit) 
            };
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        const normalizedQuery = this.normalizeSearchQuery(query);
        
        if (normalizedQuery.length < 1) {
            return { success: true, suggestions: [] };
        }
        
        const endpoint = `${this.baseUrl}/autocomplete`;
        
        try {
            const response = await this.request(endpoint, { 
                q: normalizedQuery, 
                limit 
            }, 3000);
            
            const suggestions = response.data?.suggestions || [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            const historySuggestions = this.searchHistory
                .filter(h => h.toLowerCase().includes(normalizedQuery.toLowerCase()))
                .slice(0, 3)
                .map(text => ({
                    text,
                    type: 'history',
                    score: 100
                }));
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            const smartSuggestions = this.generateSmartSuggestions(normalizedQuery);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            const allSuggestions = [...historySuggestions, ...suggestions, ...smartSuggestions]
                .sort((a, b) => (b.score || 0) - (a.score || 0))
                .slice(0, limit);
            
            return {
                success: true,
                suggestions: allSuggestions
            };
            
        } catch (error) {
            console.warn('Autocomplete failed:', error);
            return { success: false, suggestions: [] };
        }
    }
    
    /**
     * –ü–æ–∏—Å–∫ —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º (debounce)
     */
    searchDebounced(params = {}) {
        return new Promise((resolve) => {
            clearTimeout(this.searchDebounceTimer);
            this.searchDebounceTimer = setTimeout(async () => {
                const result = await this.search(params);
                resolve(result);
            }, this.searchDebounceTime);
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ ID —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    async getProductsByIds(ids, cityId = null) {
        if (!ids.length) return { success: true, data: [] };
        
        const endpoint = `${this.baseUrl}/products/batch`;
        const cacheKey = this.getCacheKey('batch', { ids: ids.sort(), cityId });
        
        const cached = this.getFromCache(cacheKey);
        if (cached) return cached;
        
        try {
            const response = await this.request(endpoint, {
                ids: ids.join(','),
                city_id: cityId || this.getCurrentCityId()
            });
            
            const result = {
                success: true,
                data: response.data || []
            };
            
            this.saveToCache(cacheKey, result);
            return result;
            
        } catch (error) {
            return this.errorResponse(error.message);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä
     */
    async getProduct(id, cityId = null) {
        const products = await this.getProductsByIds([id], cityId);
        if (products.success && products.data.length > 0) {
            return {
                success: true,
                data: products.data[0]
            };
        }
        return this.errorResponse('Product not found');
    }
    
    /**
     * –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    enhanceSearchResults(data, query) {
        if (!query || !data.products.length) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        data.products.forEach(product => {
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è UI
            product._relevance = this.calculateRelevance(product, query);
            
            // –ú–∞—Ä–∫–∏—Ä—É–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if (product.external_id?.toLowerCase() === query) {
                product._exact_match = true;
                product._match_type = 'external_id';
            } else if (product.sku?.toLowerCase() === query) {
                product._exact_match = true;
                product._match_type = 'sku';
            }
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
            if (product._highlight) {
                product._formatted_name = this.formatHighlight(
                    product.name, 
                    product._highlight.name?.[0] || product.name
                );
            }
        });
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è UI
        data.groups = this.groupSearchResults(data.products);
    }
    
    /**
     * –†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è UI
     */
    calculateRelevance(product, query) {
        let score = product._score || 0;
        
        // –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if (product.in_stock) score += 10;
        if (product.popularity_score) score += product.popularity_score * 5;
        if (product._exact_match) score += 100;
        
        // –®—Ç—Ä–∞—Ñ –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if (product.name && product.name.length > 100) score -= 5;
        
        return Math.round(score);
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
     */
    formatHighlight(original, highlighted) {
        // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–∞ span —Å –∫–ª–∞—Å—Å–æ–º
        return highlighted
            .replace(/<mark>/g, '<span class="search-highlight">')
            .replace(/<\/mark>/g, '</span>');
    }
    
    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    groupSearchResults(products) {
        const groups = {
            exact: [],      // –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            high: [],       // –í—ã—Å–æ–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
            medium: [],     // –°—Ä–µ–¥–Ω—è—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
            low: []         // –ù–∏–∑–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        };
        
        products.forEach(product => {
            if (product._exact_match) {
                groups.exact.push(product);
            } else if (product._relevance > 70) {
                groups.high.push(product);
            } else if (product._relevance > 30) {
                groups.medium.push(product);
            } else {
                groups.low.push(product);
            }
        });
        
        return groups;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞
     */
    generateQuerySuggestions(query, searchData) {
        const suggestions = [];
        
        if (!query || searchData.total === 0) {
            suggestions.push({
                type: 'tip',
                text: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞'
            });
        }
        
        if (searchData.total < 5 && query.length > 3) {
            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å
            const words = query.split(' ');
            if (words.length > 1) {
                suggestions.push({
                    type: 'alternative',
                    text: `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–∫–∞—Ç—å: "${words[0]}"`
                });
            }
        }
        
        return suggestions;
    }
    
    /**
     * –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
     */
    saveToSearchHistory(query) {
        if (!query || query.length < 2) return;
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        this.searchHistory = this.searchHistory.filter(q => q !== query);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        this.searchHistory.unshift(query);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        if (this.searchHistory.length > 20) {
            this.searchHistory = this.searchHistory.slice(0, 20);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        try {
            localStorage.setItem('searchHistory', JSON.stringify(this.searchHistory));
        } catch (e) {
            console.warn('Failed to save search history');
        }
    }
    
    loadSearchHistory() {
        try {
            const saved = localStorage.getItem('searchHistory');
            return saved ? JSON.parse(saved) : [];
        } catch (e) {
            return [];
        }
    }
    
    getSearchHistorySuggestions(limit) {
        return this.searchHistory
            .slice(0, limit)
            .map(text => ({
                text,
                type: 'history',
                score: 50
            }));
    }
    
    clearSearchHistory() {
        this.searchHistory = [];
        try {
            localStorage.removeItem('searchHistory');
        } catch (e) {}
    }
    
    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    async request(url, params = {}, timeout = null) {
        const controller = new AbortController();
        const requestId = this.generateRequestId();
        
        const timeoutId = setTimeout(
            () => controller.abort(),
            timeout || this.requestTimeout
        );
        
        try {
            // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            const cleanParams = this.sanitizeParams(params);
            const queryString = new URLSearchParams(cleanParams).toString();
            const fullUrl = queryString ? `${url}?${queryString}` : url;
            
            console.log(`üîç [${requestId}] Request: ${fullUrl}`);
            
            const response = await fetch(fullUrl, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-Request-ID': requestId
                },
                credentials: 'same-origin',
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö HTTP —Å—Ç–∞—Ç—É—Å–æ–≤
            if (!response.ok) {
                await this.handleHttpError(response, fullUrl, requestId);
            }
            
            const data = await response.json();
            
            if (!data || typeof data !== 'object') {
                throw new Error('INVALID_RESPONSE_FORMAT');
            }
            
            console.log(`‚úÖ [${requestId}] Success`);
            return data;
            
        } catch (error) {
            clearTimeout(timeoutId);
            return await this.handleRequestError(error, url, params, requestId);
        }
    }
    
    /**
     * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—Ä–æ—Å–∞
     */
    async handleRequestError(error, url, params, requestId) {
        console.error(`‚ùå [${requestId}] Error:`, error.message);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è 503
        if (error.message === 'SERVICE_TEMPORARILY_UNAVAILABLE') {
            return await this.handle503Error(url, params, requestId);
        }
        
        if (error.name === 'AbortError') {
            return await this.handleTimeoutError(url, params, requestId);
        }
        
        // –û–±—â–∞—è fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        return this.getFallbackResponse(error, params);
    }
    
    /**
     * –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 503 –æ—à–∏–±–æ–∫
     */
    async handle503Error(url, params, requestId) {
        console.warn(`‚ö†Ô∏è [${requestId}] Service unavailable, trying fallback strategies`);
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        const cacheKey = this.getCacheKey('search', params);
        const cached = this.getFromCache(cacheKey);
        
        if (cached) {
            console.log(`üíæ [${requestId}] Using cache`);
            return {
                ...cached,
                warning: '–ü–æ–∫–∞–∑–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫–µ—à–∞ - —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                fallback_used: 'cache'
            };
        }
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if (params.q && params.q.length > 5) {
            console.log(`üîÑ [${requestId}] Trying simplified request`);
            
            try {
                const simplifiedParams = {
                    ...params,
                    q: params.q.substring(0, Math.min(10, params.q.length)),
                    limit: Math.min(params.limit || 20, 10)
                };
                
                // –î–∞–µ–º –µ—â–µ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ 1 —Å–µ–∫
                
                const result = await this.makeSimpleRequest(url, simplifiedParams);
                return {
                    ...result,
                    warning: '–ü–æ–∫–∞–∑–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞',
                    fallback_used: 'simplified'
                };
                
            } catch (e) {
                console.warn(`‚ö†Ô∏è [${requestId}] Simplified request also failed`);
            }
        }
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –í–æ–∑–≤—Ä–∞—â–∞–µ–º graceful fallback
        return this.getFallbackResponse(new Error('Service temporarily unavailable'), params);
    }
    
    /**
     * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
     */
    async makeSimpleRequest(url, params) {
        const controller = new AbortController();
        setTimeout(() => controller.abort(), 5000); // –ö–æ—Ä–æ—Ç–∫–∏–π timeout
        
        const queryString = new URLSearchParams(params).toString();
        const fullUrl = `${url}?${queryString}`;
        
        const response = await fetch(fullUrl, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            signal: controller.signal
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        return await response.json();
    }
    
    /**
     * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    sanitizeParams(params) {
        const sanitized = {};
        
        Object.entries(params).forEach(([key, value]) => {
            if (value !== null && value !== undefined && value !== '') {
                switch (key) {
                    case 'q':
                        // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                        sanitized[key] = String(value)
                            .trim()
                            .replace(/[<>'"\\]/g, '')
                            .replace(/\s+/g, ' ')
                            .substring(0, 200);
                        break;
                    case 'page':
                    case 'limit':
                    case 'city_id':
                        const numValue = parseInt(value);
                        if (!isNaN(numValue) && numValue > 0) {
                            sanitized[key] = numValue;
                        }
                        break;
                    case 'sort':
                        const allowedSorts = ['relevance', 'name', 'price_asc', 'price_desc', 'availability', 'popularity'];
                        if (allowedSorts.includes(value)) {
                            sanitized[key] = value;
                        }
                        break;
                    default:
                        sanitized[key] = value;
                }
            }
        });
        
        return sanitized;
    }
    
    generateRequestId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2, 5);
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    errorResponse(message) {
        return {
            success: false,
            error: message,
            data: {
                products: [],
                total: 0
            }
        };
    }
    
    /**
     * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
     */
    async preloadPopularProducts() {
        const params = {
            sort: 'popularity',
            limit: 20
        };
        
        try {
            await this.search(params);
        } catch (e) {
            console.warn('Failed to preload popular products');
        }
    }
    
    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    getCacheKey(type, params) {
        return `${type}_${JSON.stringify(params)}`;
    }
    
    getFromCache(key) {
        const cached = this.cache.get(key);
        if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
            return cached.data;
        }
        this.cache.delete(key);
        return null;
    }
    
    saveToCache(key, data) {
        this.cache.set(key, {
            data,
            timestamp: Date.now()
        });
    }

    /**
     * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
     */
    smartSearch(query) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        const queryType = this.detectQueryType(query);
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
        const params = {
            q: query,
            strategy: queryType,
            fuzziness: queryType === 'code' ? 0 : 'AUTO'
        };

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
        const synonyms = this.getSynonyms(query);
        if (synonyms.length > 0) {
            params.expand = synonyms.join('|');
        }

        return this.search(params);
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
     */
    detectQueryType(query) {
        if (/^[\w\-\.]{3,}$/i.test(query)) return 'code';
        if (/\d+[x—Ö√ó]\d+/.test(query)) return 'dimension';
        if (/\d+[a-z–∞-—è]/i.test(query)) return 'specification';
        return 'fulltext';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è —Ç–µ—Ä–º–∞
     */
    getSynonyms(term) {
        const synonymMap = {
            '—Å–≤–µ—Ç': ['–ª–∞–º–ø–∞', '–æ—Å–≤–µ—â–µ–Ω–∏–µ', '—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫'],
            '—Ä–æ–∑–µ—Ç–∫–∞': ['—Ä–∞–∑—ä–µ–º', 'socket'],
            '1–ø': ['–æ–¥–Ω–æ–ø–æ–ª—é—Å–Ω—ã–π', '1-–ø–æ–ª—é—Å–Ω—ã–π', '1 pole'],
            // ...
        };
        return synonymMap[term.toLowerCase()] || [];
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const productService = new ProductService();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (typeof window !== 'undefined') {
    window.addEventListener('load', () => {
        productService.preloadPopularProducts();
    });
}